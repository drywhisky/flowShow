


app {


  server {
    protocol = "http"
    host = "flowdev.neoap.com"
    port = 49002
    InternalToken = "aklj345lkjOIu345olnmadf"
  }

  http {
    interface = "0.0.0.0"
    port = 49002
  }

}

dependence {

  nyx {
    protocol = "http://"
    websokectProtocol = "ws://"
    host = "10.1.29.247"   //本地--super服务器
    //    host = "192.168.0.247"   //服务器
    //    host = "182.92.149.40" //本地--阿里云服务器
    port = "30241"

    appId = "feelershow"
    secureKey = "kajfowi3rjo2394809h82HOiuD0983YR0UI394TJ94994"
  }

  group {
    groupId = [13, 14, 12, 11]
    groupName = ["7层", "8层", "9层", "12层"]
  }


}




slick.db {
  //url = "jdbc:postgresql://10.1.29.247:5432/webchat"
  //url = "jdbc:postgresql://192.168.0.247:5432/webchat"
  url = "jdbc:postgresql://127.0.0.1:5432/webchat"
  user = "webchat"
  password = "webchat2017Seekloud1126"
  maximumPoolSize = 3
  connectTimeout = 30000
  idleTimeout = 300000
  maxLifetime = 900000
}


//akka.http{
//
//  session {
//    cookie {
//      name = "PLAY_SESSION"
//      domain = none
//      secure = false
//      http-only = true
//    }
//    server-secret = "0gfmOdf34doi2dg-aj53Kelk4;ztymc23;r3r3l*m3^20M3;l20;[+Gfdyrtyr4sKrtsyhf92dj:hf923"
//    max-age = none
//    encrypt-data = false
//  }
//
//  refresh-token {
//    cookie {
//      name = "PLAY_SESSION"
//      domain = none
//      secure = false
//      http-only = true
//    }
//
//    max-age = none
//    remove-used-token-after = 7200 seconds
//  }
//
//
//}

session {

  cookie {
    name = "wbct"
    domain = none
    path = "/"
    secure = false
    httpOnly = true
    maxAge = 1 days
  }
  encryptData = false
  serverSecret = "0gfmOdf34doi2dg-aj53Kelk4;ztymc23;r3r3l*m3^20M3;l20;[+Gfdyrtyr4sKrtsyhf92"

}


akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"


  actor {


    warn-about-java-serializer-usage = false

    default-dispatcher {

      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 8

        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        # parallelism-factor = 3.0
        parallelism-factor = 3.0

        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 64

        # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
        # like peeking mode which "pop".
        task-peeking-mode = "FIFO"
      }
    }

    my-blocking-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"

      thread-pool-executor {
        # Keep alive time for threads
        keep-alive-time = 60s

        # Define a fixed thread pool size with this property. The corePoolSize
        # and the maximumPoolSize of the ThreadPoolExecutor will be set to this
        # value, if it is defined. Then the other pool-size properties will not
        # be used.
        #
        # Valid values are: `off` or a positive integer.
        fixed-pool-size = off

        # Min number of threads to cap factor-based corePoolSize number to
        core-pool-size-min = 16

        # The core-pool-size-factor is used to determine corePoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor).
        # Resulting size is then bounded by the core-pool-size-min and
        # core-pool-size-max values.
        core-pool-size-factor = 100.0

        # Max number of threads to cap factor-based corePoolSize number to
        core-pool-size-max = 256

        # Minimum number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-min = 16

        # The max-pool-size-factor is used to determine maximumPoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor)
        # The maximumPoolSize will not be less than corePoolSize.
        # It is only used if using a bounded task queue.
        max-pool-size-factor = 100.0

        # Max number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-max = 256

        # Specifies the bounded capacity of the task queue (< 1 == unbounded)
        task-queue-size = -1

        # Specifies which type of task queue will be used, can be "array" or
        # "linked" (default)
        task-queue-type = "linked"

        # Allow core threads to time out
        allow-core-timeout = on
      }

      throughput = 100
    }

  }


  http {

    server {

      remote-address-header = on

      parsing {

        max-content-length = 12m
        max-chunk-ext-length = 256
        max-chunk-size = 2m

      }
    }
  }


  persistence {

    journal {

      plugin = "akka.persistence.journal.leveldb"

      leveldb {
        dir = "./akkaPersist/journal"
        #dir = "/home/zhangtao/product/mpAuthor/akkaPersist/journal"

        #off for sbt test run, on for produce.
        native = off
      }
    }

    snapshot-store {

      plugin = "akka.persistence.snapshot-store.local"

      local {
        dir = "./akkaPersist/snapshot"
        #dir = "/home/zhangtao/product/mpAuthor/akkaPersist/snapshot"
      }
    }
  }

}


# Configuratino for Play ws
play.ws {

  timeout {

    # If non null, the connection timeout, this is how long to wait for a TCP connection to be made
    connection = 2 minutes

    # If non null, the idle timeout, this is how long to wait for any IO activity from the remote host
    # while making a request
    idle = 2 minutes

    # If non null, the request timeout, this is the maximum amount of time to wait for the whole request
    request = 2 minutes
  }

  # Whether redirects should be followed
  followRedirects = true

  # Whether the JDK proxy properties should be read
  useProxyProperties = true

  # If non null, will set the User-Agent header on requests to this
  useragent = null

  # Whether compression should be used on incoming and outgoing requests
  compressionEnabled = false


  # Configuration specific to the Ahc implementation of the WS client
  ahc {
    # Pools connections.  Replaces setAllowPoolingConnections and setAllowPoolingSslConnections.
    keepAlive = true

    # The maximum number of connections to make per host. -1 means no maximum.
    maxConnectionsPerHost = -1

    # The maximum total number of connections. -1 means no maximum.
    maxConnectionsTotal = 1000

    # The maximum number of redirects.
    maxNumberOfRedirects = 5

    # The maximum number of times to retry a request if it fails.
    maxRequestRetry = 5

    # If non null, the maximum time that a connection should live for in the pool.
    maxConnectionLifetime = 30 minute

    # If non null, the time after which a connection that has been idle in the pool should be closed.
    idleConnectionInPoolTimeout = 1 minute

    # Whether the raw URL should be used.
    disableUrlEncoding = false

  }
}


